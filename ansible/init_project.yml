---
- name: Verify that the gateway type is set
  fail:
    msg: "gateway_type variable is not defined"
  when: gateway_type is not defined

- name: Create project
  oc:
    state: present
    inline:
      kind: ProjectRequest
      metadata:
        name: coolstore
      displayName: Coolstore

- name: Add project role Admin to developer
  oc:
    state: present
    inline:
      kind: RoleBinding
      metadata:
        name: admin
        namespace: coolstore
      roleRef:
        name: admin
      userNames:
        - "developer"


- name: Setup access rights for Istio for the project
  shell: |
    {{ openshift_cli }} adm policy add-scc-to-user privileged -z default -n coolstore
    {{ openshift_cli }} adm policy add-scc-to-user anyuid -z default coolstore
    {{ openshift_cli }} adm policy add-role-to-group view system:serviceaccounts -n coolstore
    {{ openshift_cli }} adm policy add-role-to-user admin system:serviceaccount:coolstore:default -n coolstore
    {{ openshift_cli }} adm policy add-role-to-user view -z default -n coolstore

- name: set istioctl kubeconfig
  set_fact:
    istio_options: "--kubeconfig {{ oc_kube_config }}"
  when:
    - oc_kube_config is defined
    - oc_kube_config is not none
    - oc_kube_config|trim() != ""


- name: Deploy web, catalog and inventory services
  shell: |
    {{ openshift_cli }} apply -f <({{ istio_ctl }} kube-inject {{ istio_options }} -f files/{{ item }}-deployment.yml) -n coolstore
    {{ openshift_cli }} create -f files/{{ item }}-service.yml -n coolstore
  args:
    executable: /bin/bash
  with_items:
    - inventory
    - catalog
    - web

- name: Expose services
  shell: "{{ openshift_cli }} expose svc/{{ item }} -n coolstore-{{ project_suffix }}"
  with_items:
     - gateway-{{ project_suffix }}
     - web

- name: Deploy the different gateway types
  shell: |
    {{ openshift_cli }} apply -f <({{ istio_ctl }} kube-inject {{ istio_options }} -f files/{{ item }}-deployment.yml) -n coolstore
    {{ openshift_cli }} create -f files/{{ item }}-service.yml -n coolstore
  args:
    executables: /bin/bash
  with_subelements:
    - "{{ gateway_types }}"

- name: Expose services
  shell: "{{ openshift_cli }} expose svc/{{ item }} -n coolstore-{{ project_suffix }}"
  with_items:
     - gateway-{{ project_suffix }}
     - web

- name: Update gateway configuration
  shell: |
    {{ openshift_cli }} env deployment/web  -n coolstore-{{ project_suffix }} --overwrite \
        COOLSTORE_GW_ENDPOINT="gateway-{{ project_suffix }}-coolstore-{{ project_suffix }}" \
        HOSTNAME_HTTP="web:8080"


- name: Add delay rule for inventory
  shell: "{{ istio_ctl }} create -f files/route-rule-inventory-delay.yml -n coolstore"

- name: Deploy web
  shell: |
    {{ openshift_cli }} get svc web-spring -n coolstore || \
    ( \
      {{ openshift_cli }} apply -f <({{ istio_ctl }} kube-inject {{ istio_options }} -f files/web-deployment.yml) -n coolstore && \
      {{ openshift_cli }} create -f files/web-service.yml -n coolstore; \
      {{ openshift_cli }} expose svc/web-spring -n coolstore; \
      {{ openshift_cli }} env deployment/web-spring  -n coolstore-{{ project_suffix }} --overwrite \
              COOLSTORE_GW_ENDPOINT="gateway-spring-coolstore" \
              HOSTNAME_HTTP="web-spring:8080";
    )
  args:
    executable: /bin/bash